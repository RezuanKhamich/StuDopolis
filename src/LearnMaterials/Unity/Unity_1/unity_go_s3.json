{
    "update": "25.07.2021",
    "sectionName": "Методы",
    
    "pageCount": 6,
    "pageType": ["", "T", "П", "", "T", "П"],
    "pageFlow": {
        "page1": [
            {
                "pageSecondTitles": "Моделирование и анимация. Работа со звуком",
                "num": 1
            },
            {
                "pageText": "Есть много методов вычисления отражённого освещения, два самых известных — это Global Illumination (GI) и Final Gather (FG). Их можно использовать по отдельности, но вместе они выдают особенно хороший результат. Однако за всё приходится платить: рендер, то есть процесс вычисления сложного освещения и последующей его визуализации, займёт уйму времени."
            },
            {
                "pageText": "Global Illumination (GI) представляет из себя наиболее “честный” способ симуляции отражённого света. Из источника света вылетают фотоны — частички, несущие информацию о цвете и яркости света. Ударяясь о какую-либо поверхность, они освещают её, но теряют часть энергии, вследствие чего их цвет и яркость изменяются. Затем фотоны отскакивают и ударяются о следующую поверхность, повторно теряя часть энергии. Так происходит несколько раз в зависимости от настроек рендерера."
            },
            {
                "pageSecondTitles": "Моделирование и анимация. Работа со звуко1",
                "num": 2
            },
            {
                "pageText": "Final Gather (FG) раскидывает по сцене точки, — final gather points, — из которых в разные стороны вылетают лучи. После столкновения с какой-либо поверхностью, лучи возвращают в родительскую точку информацию о цвете и его яркости. Представьте себе такую картину: вечер, солнце почти зашло за горизонт; становится темно, но небольшая часть комнаты ещё залита оранжевым закатным светом. Находящаяся на полу final gather point отправляет в разные стороны несколько лучей, некоторые из них дотягиваются до освещённой части комнаты и с этой информацией возвращаются в исходную точку, тем самым слегка освещая пол «отражённым» оранжевым светом. Это не такой “честный” способ, как GI, но он производит хороший результат, и им часто пользуются, чтобы заполнять сцены красивым мягким освещением."
            },
            {
                "pageCode": [
                    "<div style='background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;'><pre style='margin: 0; line-height: 125%'><span style='color: #e6db74'>&quot;use strict&quot;</span><span style='color: #f8f8f2'>;</span>\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>arr</span> <span style='color: #f92672'>=</span> <span style='color: #f8f8f2'>[];</span>\n\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>getProto</span> <span style='color: #f92672'>=</span> <span style='color: #f8f8f2'>Object.</span><span style='color: #a6e22e'>getPrototypeOf</span><span style='color: #f8f8f2'>;</span>\n\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>slice</span> <span style='color: #f92672'>=</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>slice</span><span style='color: #f8f8f2'>;</span>\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>flat</span> <span style='color: #f92672'>=</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>flat</span> <span style='color: #f92672'>?</span> <span style='color: #66d9ef'>function</span><span style='color: #f8f8f2'>(</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>)</span> <span style='color: #f8f8f2'>{</span>\n",
                    "   <span style='color: #66d9ef'>return</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>flat</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>call</span><span style='color: #f8f8f2'>(</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>);</span>\n",
                    "<span style='color: #f8f8f2'>}</span> <span style='color: #f92672'>:</span> <span style='color: #66d9ef'>function</span><span style='color: #f8f8f2'>(</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>)</span> <span style='color: #f8f8f2'>{</span>\n",
                    "   <span style='color: #66d9ef'>return</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>concat</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>apply</span><span style='color: #f8f8f2'>(</span> <span style='color: #f8f8f2'>[],</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>);</span>\n",
                    "<span style='color: #f8f8f2'>};</span>\n'",
                    "</pre></div>'"
                ]
            }
        ],
        "page2": [
            {
                "pageSecondTitles": "Циклы. Работа со звуком",
                "num": 1
            },
            {
                "pageText": "Есть много методов вычисления отражённого освещения, два самых известных — это Global Illumination (GI) и Final Gather (FG). Их можно использовать по отдельности, но вместе они выдают особенно хороший результат. Однако за всё приходится платить: рендер, то есть процесс вычисления сложного освещения и последующей его визуализации, займёт уйму времени."
            },
            {
                "pageText": "Global Illumination (GI) представляет из себя наиболее “честный” способ симуляции отражённого света. Из источника света вылетают фотоны — частички, несущие информацию о цвете и яркости света. Ударяясь о какую-либо поверхность, они освещают её, но теряют часть энергии, вследствие чего их цвет и яркость изменяются. Затем фотоны отскакивают и ударяются о следующую поверхность, повторно теряя часть энергии. Так происходит несколько раз в зависимости от настроек рендерера."
            },
            {
                "pageCode": [
                    "<div style='background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;'><pre style='margin: 0; line-height: 125%'><span style='color: #e6db74'>&quot;use strict&quot;</span><span style='color: #f8f8f2'>;</span>\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>arr</span> <span style='color: #f92672'>=</span> <span style='color: #f8f8f2'>[];</span>\n\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>getProto</span> <span style='color: #f92672'>=</span> <span style='color: #f8f8f2'>Object.</span><span style='color: #a6e22e'>getPrototypeOf</span><span style='color: #f8f8f2'>;</span>\n\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>slice</span> <span style='color: #f92672'>=</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>slice</span><span style='color: #f8f8f2'>;</span>\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>flat</span> <span style='color: #f92672'>=</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>flat</span> <span style='color: #f92672'>?</span> <span style='color: #66d9ef'>function</span><span style='color: #f8f8f2'>(</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>)</span> <span style='color: #f8f8f2'>{</span>\n",
                    "   <span style='color: #66d9ef'>return</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>flat</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>call</span><span style='color: #f8f8f2'>(</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>);</span>\n",
                    "<span style='color: #f8f8f2'>}</span> <span style='color: #f92672'>:</span> <span style='color: #66d9ef'>function</span><span style='color: #f8f8f2'>(</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>)</span> <span style='color: #f8f8f2'>{</span>\n",
                    "   <span style='color: #66d9ef'>return</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>concat</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>apply</span><span style='color: #f8f8f2'>(</span> <span style='color: #f8f8f2'>[],</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>);</span>\n",
                    "<span style='color: #f8f8f2'>};</span>\n'",
                    "</pre></div>'"
                ]
            }
        ],
        "page3": [
            {
                "pageSecondTitles": "Циклы. Работа со звуком",
                "num": 1
            },
            {
                "pageText": "Есть много методов вычисления отражённого освещения, два самых известных — это Global Illumination (GI) и Final Gather (FG). Их можно использовать по отдельности, но вместе они выдают особенно хороший результат. Однако за всё приходится платить: рендер, то есть процесс вычисления сложного освещения и последующей его визуализации, займёт уйму времени."
            },
            {
                "pageText": "Global Illumination (GI) представляет из себя наиболее “честный” способ симуляции отражённого света. Из источника света вылетают фотоны — частички, несущие информацию о цвете и яркости света. Ударяясь о какую-либо поверхность, они освещают её, но теряют часть энергии, вследствие чего их цвет и яркость изменяются. Затем фотоны отскакивают и ударяются о следующую поверхность, повторно теряя часть энергии. Так происходит несколько раз в зависимости от настроек рендерера."
            },
            {
                "pageCode": [
                    "<div style='background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;'><pre style='margin: 0; line-height: 125%'><span style='color: #e6db74'>&quot;use strict&quot;</span><span style='color: #f8f8f2'>;</span>\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>arr</span> <span style='color: #f92672'>=</span> <span style='color: #f8f8f2'>[];</span>\n\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>getProto</span> <span style='color: #f92672'>=</span> <span style='color: #f8f8f2'>Object.</span><span style='color: #a6e22e'>getPrototypeOf</span><span style='color: #f8f8f2'>;</span>\n\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>slice</span> <span style='color: #f92672'>=</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>slice</span><span style='color: #f8f8f2'>;</span>\n",
                    "<span style='color: #66d9ef'>var</span> <span style='color: #a6e22e'>flat</span> <span style='color: #f92672'>=</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>flat</span> <span style='color: #f92672'>?</span> <span style='color: #66d9ef'>function</span><span style='color: #f8f8f2'>(</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>)</span> <span style='color: #f8f8f2'>{</span>\n",
                    "   <span style='color: #66d9ef'>return</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>flat</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>call</span><span style='color: #f8f8f2'>(</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>);</span>\n",
                    "<span style='color: #f8f8f2'>}</span> <span style='color: #f92672'>:</span> <span style='color: #66d9ef'>function</span><span style='color: #f8f8f2'>(</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>)</span> <span style='color: #f8f8f2'>{</span>\n",
                    "   <span style='color: #66d9ef'>return</span> <span style='color: #a6e22e'>arr</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>concat</span><span style='color: #f8f8f2'>.</span><span style='color: #a6e22e'>apply</span><span style='color: #f8f8f2'>(</span> <span style='color: #f8f8f2'>[],</span> <span style='color: #a6e22e'>array</span> <span style='color: #f8f8f2'>);</span>\n",
                    "<span style='color: #f8f8f2'>};</span>\n'",
                    "</pre></div>'"
                ]
            }
        ],
        "page4": [
            {
                "pageSecondTitles": "Циклы. Работа со звуком",
                "num": 1
            },
            {
                "pageText": "Есть много методов вычисления отражённого освещения, два самых известных — это Global Illumination (GI) и Final Gather (FG). Их можно использовать по отдельности, но вместе они выдают особенно хороший результат. Однако за всё приходится платить: рендер, то есть процесс вычисления сложного освещения и последующей его визуализации, займёт уйму времени."
            },
            {
                "pageText": "Global Illumination (GI) представляет из себя наиболее “честный” способ симуляции отражённого света. Из источника света вылетают фотоны — частички, несущие информацию о цвете и яркости света. Ударяясь о какую-либо поверхность, они освещают её, но теряют часть энергии, вследствие чего их цвет и яркость изменяются. Затем фотоны отскакивают и ударяются о следующую поверхность, повторно теряя часть энергии. Так происходит несколько раз в зависимости от настроек рендерера."
            },
            {
                "pageTest": {
                    "title": "Физика в Unity",
                    "questions": [
                        "За что отвечает компонент Rigidbody?",
                        "Какой параметр выключает гравитацию для объекта?",
                        "Как сделать boxCollider триггером?"
                    ],
                    "answers": [
                        "За динамику физических объектов",
                        "Отвечает за трение материалов",
                        "За плотность объекта",
                        "Отвечает за качество столкновений",
                        "Collider > UseGravity",
                        "TerrainCollider > Gravity",
                        "Rigidbody > UseGravity",
                        "Joint > Gravity",
                        "Программно или инспектор",
                        "Только программно",
                        "boxCollider нельзя сделать триггером",
                        "С помощью доп плагинов"
                    ],
                    "trueAnswers": [
                        1,
                        3,
                        1
                    ]
                }
            }
        ],
        "page5": [
            {
                "pageSecondTitles": "Циклы. Работа со звуком",
                "num": 1
            }
        ]
    }
}